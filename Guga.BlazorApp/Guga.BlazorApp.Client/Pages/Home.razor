@page "/"
@using Guga.Collector.Interfaces
@using Guga.Collector.Services
@using Guga.Core.Enums
@using PLCCollect.Collector.Interfaces
@inject ISignalCollector signalCollector
@inject ICollectorRedisService _collectorRedisService
@inject ISignalWriter _signalWriterService
@inject IMasterServeStatus _masterServeStatus //服务竞选状态
@inject ISnackbar Snackbar
@inject ISimulatedSignalWriter _simulatedSignalWriter
@inject ILogService LogService
<PageTitle>Home Dasboard</PageTitle>
<MudGrid>
    <MudItem xs="12" sm="6" Style="height:320px">
        

            <MudStack>
                <MudPaper Class="pa-4">

                    <MudText Typo="Typo.h6">服务状态</MudText>
                    <MudDivider />
                    <MudStack Row="true" Class="border-dashed pa-4">
                        <MudIconButton Icon="@Icons.Material.Filled.Home" />
                        <MudStack Justify="Justify.Center" Spacing="0">

                            <MudText Typo="Typo.body1">
                                服务编码：@_masterServeStatus.serverOptions.ServerCode
                            </MudText>
                        </MudStack>


                        <MudIconButton Icon="@Icons.Material.Filled.Hive"/>
                        <MudStack Justify="Justify.Center" Spacing="0">

                            <MudText Typo="Typo.body1">
                                竞选状态：@_masterServeStatus.IsMaster

                                @if (_masterServeStatus.IsMaster)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />

                                }
                                else

                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" />
                                }
                            </MudText>
                        </MudStack>

                    </MudStack>
            

                   
                    <MudStack Spacing="4" Class="border-dashed pa-4">

                        <MudStack Row="true">

                         

                            <MudText >
                                <MudIconButton Icon="@Icons.Material.Filled.MoveUp" />
                                采集器：
                            </MudText>

                            <MudSwitch T="bool" Value="CollectorSwith" ValueChanged="CollectorSwithChange" Color="Color.Success" />
                   
                           
                            <MudText Typo="Typo.body1">
                                <MudIconButton Icon="@Icons.Material.Filled.MoveDown" />
                                写入器：

                            </MudText>
                            <MudSwitch T="bool" Value="WriterSwith" ValueChanged="WriterSwithChange" Color="Color.Success" />
                      
                           
                            <MudText Typo="Typo.body1">
                                <MudIconButton Icon="@Icons.Material.Filled.Fitbit" />
                                模拟器：

                            </MudText>

                            <MudSwitch T="bool" Value="SimulateSwith" ValueChanged="SimulateSwithChange" Color="Color.Success" />
                        </MudStack>

                    </MudStack>
                <MudPaper Class="pa-4" Elevation="0">
                    <MudChip T="string" Icon="@Icons.Custom.Uncategorized.Radioactive" Label="true" Color="Color.Warning" Style="color:black;">
                        写入队列长度: @_collectorRedisService._CurrentWriteQueueLength
                    </MudChip>
                </MudPaper>
                
                </MudPaper>
            </MudStack>

       
    </MudItem>
    <MudItem xs="12" sm="6"  Style="height:320px">
       
        <MudPaper Class="pa-4" Style="height:100%">
            <MudText Typo="Typo.h6">模拟参数</MudText>
            <MudDivider />
        
            <MudPaper Class="pa-4" Elevation="0">



                <MudStack Spacing="4">



                    <MudNumericField Variant="Variant.Text" @bind-Value="_signalWriterService._MaxProcessCount"
                                     Min="5" Step="100" Label="模拟单次写入数量"  AdornmentText="n" />







                    <MudNumericField Variant="Variant.Text" @bind-Value="_simulatedSignalWriter.SimulatedSignalWriteInterval"
                                     Min="50" Step="100" Label="模拟产生间隔"  AdornmentText="ms" />



                    <MudNumericField Variant="Variant.Text" @bind-Value="_signalWriterService._WriteInterval"
                                     Min="50" Step="100" Label="写入间隔"  AdornmentText="ms" />



                </MudStack>


            </MudPaper>
        </MudPaper>
       
    </MudItem>
      <MudItem xs="12" sm="12" Style="height:100%" >
            <MudPaper Class="pa-4">
            <MudText Typo="Typo.h6">实时日志</MudText>
            <MudDivider />
        <LogDisplay MaxLogCount="200" />
        </MudPaper>
    </MudItem>
  @*   <MudItem xs="12" sm="6">
    <MudPaper Elevation="2" Class="pa-4" Style="height: 100%" ></MudPaper>
    </MudItem> *@

</MudGrid>

<style>

</style>
@code {
  
    private bool CollectorSwith { get; set; } 
    private bool WriterSwith { get; set; }
    private bool SimulateSwith { get; set; }
    private List<LogEntry> logs = new();
    private IDisposable? logSubscription;

    protected override Task OnInitializedAsync()
    {
        CollectorSwith = signalCollector.IsRunning;
        WriterSwith = _signalWriterService.IsRunning;
        SimulateSwith = _simulatedSignalWriter.SimulatedSignalWriteState;
        return base.OnInitializedAsync();
    }

    private async Task SimulateSwithChange(bool value)
    {
      
        SimulateSwith = value;
        if (SimulateSwith)
        {

             _simulatedSignalWriter.Start();

            Snackbar.Add(severity: Severity.Success, message: "写入数据模拟器启动");

        }
        else
        {

             _simulatedSignalWriter.Stop();
            Snackbar.Add(severity: Severity.Warning, message: "写入数据模拟器关闭");


        }
    }
    private async Task WriterSwithChange(bool value)
    {
        CancellationToken cts = new CancellationToken();
        WriterSwith = value;
        if (WriterSwith)
        {

            await _signalWriterService.Start(cts);

            Snackbar.Add(severity: Severity.Success, message: "信号写入器启动");

        }
        else
        {

            await _signalWriterService.Stop(true);
            Snackbar.Add(severity: Severity.Warning, message: "信号写入器关闭");


        }
    }

    private async Task CollectorSwithChange(bool  value)
    {
        CancellationToken cts = new CancellationToken();
        CollectorSwith= value;
        if (CollectorSwith)
        {
           
                await signalCollector.Start(cts);

            Snackbar.Add(severity: Severity.Success, message: "信号采集器启动");

        }
        else
        {
           
               await signalCollector.Stop(true);
            Snackbar.Add(severity: Severity.Warning, message: "信号采集器关闭");
         

        }
    }

}