@page "/signals"
@inject ISnackbar Snackbar
@using Guga.Collector.Interfaces
@using Guga.Core.Interfaces
@using Guga.Core.PLCLinks
@inject IPLCLinkManager _plcmanager
@inject ISignalCollector signalCollector



<MudGrid>
    <MudItem xs="4">
        <MudButtonGroup Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled">
            <MudButton Disabled="@signalCollector.IsRunning" OnClick="start">Start</MudButton>
            <MudDivider Vertical="true" FlexItem="true" />
            <MudButton OnClick="restart" Disabled="!signalCollector.IsRunning">ReStart</MudButton>
            <MudDivider Vertical="true" FlexItem="true" />
            <MudButton OnClick="stop" Disabled="!signalCollector.IsRunning">Stop</MudButton>
            <MudDivider Vertical="true" FlexItem="true" />

        </MudButtonGroup>
    </MudItem>

    <MudItem xs="6">
    </MudItem>
    <MudItem xs="2">
        <MudNumericField @bind-Value="RefreshInterval" Min="100" Step="100" Label="刷新频率" Variant="Variant.Text" />
    </MudItem>


</MudGrid>



@if (!_links.Any())
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    
   

    @foreach (var l in _links)
    {

        <MudDataGrid Items="@l.GetSubscribedSignals()">
            <ToolBarContent>
                <MudText Typo="Typo.h6"> @l.plclinkInfo.ProtocolType_ : Ip:@l.plclinkInfo.Ip : @l.plclinkInfo.Port </MudText>
                <MudSpacer />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.SignalName"  />
                <PropertyColumn Property="x => x.ReadCycle" />
                <PropertyColumn Property="x => x.GetValue()"  Title="Value"/>
                <PropertyColumn Property='x => x.CollectTime.ToString("yyyy-MM-dd HH:mm:ss.fff")' />
              
            </Columns>
        </MudDataGrid>
        
       
    }
}

@code {

    private List<PLCLink> _links = new();
    private Timer? _timer;
    private int refreshInterval = 1000;
    private int RefreshInterval
    {
        get { return refreshInterval; }
        set
        {

            if (refreshInterval != value && _timer != null)
            {
                _timer?.Change(TimeSpan.Zero, TimeSpan.FromMilliseconds(value));

            }
            refreshInterval = value;


        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();

        _timer = new Timer(async _ =>
        {
            await LoadDataAsync();
            await   InvokeAsync(StateHasChanged); // 刷新 UI
        }, null, TimeSpan.Zero, TimeSpan.FromMilliseconds(refreshInterval));
    }

    private async void start()
    {
        try
        {
            await signalCollector.Start();
            Snackbar.Add(severity: Severity.Success,message: "信号采集器启动");
        }
        catch (Exception ex)
        {
            Snackbar.Add(severity: Severity.Error, message: ex.Message);
        }

    }
    private async void stop()
    {
        try{
            await signalCollector.Stop();
            Snackbar.Add(severity: Severity.Warning, message: "信号采集器暂停运行");
        }
        catch (Exception ex)
        {
            Snackbar.Add(severity: Severity.Error, message: ex.Message);
        }
    }
    private async void restart()
    {
        try
        {
            await signalCollector.ReStart();
            Snackbar.Add(severity: Severity.Success, message: "信号采集器重启");
        
     }
    catch (Exception ex)
    {
        Snackbar.Add(severity: Severity.Error, message: ex.Message);
    }
}

    private Task LoadDataAsync()
    {
        return Task.Run(() =>
        {
            // 获取数据
            _links = _plcmanager.PLCLinks;
        });
    }

    public void Dispose()
    {
        // 确保定时器被清理
        _timer?.Dispose();
    }

   
}
